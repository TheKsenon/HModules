from .. import loader, utils
from telethon.tl.types import Message
from telethon.tl.functions.users import GetFullUserRequest
from telethon.tl.functions.messages import DeleteHistoryRequest
import re
import asyncio

@loader.tds
class UserInfoMod(loader.Module):
    strings = {
        "name": "UserInfo",
        "userinfo_cmd_desc": "–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ",
        "advancedinfo_cmd_desc": "–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –≤–∫–ª—é—á–∞—è –¥–∞–Ω–Ω—ã–µ –æ—Ç @funstat_obot"
    }
    async def client_ready(self, client, db):
        self.client = client
        self.db = db

    @loader.owner
    async def userinfocmd(self, message):
        await message.edit("üëÅÔ∏è‚Äçüó®Ô∏è –ó–∞–≥—Ä—É–∂–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...")
        args = utils.get_args_raw(message)
        reply = await message.get_reply_message()
        try:
            if args:
                user = await self.client.get_entity(args)
            elif reply:
                user = await self.client.get_entity(reply.sender_id)
            else:
                await message.edit("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
                return
            full_user = await self.client(GetFullUserRequest(user.id))
            main_text = self.get_main_text(user, full_user)
            await self.inline.form(
                message=message,
                text=main_text,
                reply_markup=[
                    [{"text": "üîß –ü–æ–¥—Ä–æ–±–Ω–µ–µ", "callback": self.detail_callback, "args": (user.id,)}],
                ],
                photo="https://i.imgur.com/Ylwy6Gh.jpeg",
                disable_security=True,
            )
        except Exception as e:
            await message.edit(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

    @loader.owner
    async def advancedinfocmd(self, message):
        await message.edit("üëÅÔ∏è‚Äçüó®Ô∏è –ó–∞–≥—Ä—É–∂–∞—é —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...")
        args = utils.get_args_raw(message)
        reply = await message.get_reply_message()
        try:
            if args:
                user = await self.client.get_entity(args)
            elif reply:
                user = await self.client.get_entity(reply.sender_id)
            else:
                await message.edit("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, ID –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
                return
            full_user = await self.client(GetFullUserRequest(user.id))
            funstat_data = await self.get_funstat_data(user.username or user.id)
            if not funstat_data:
                await message.edit("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ—Ç @funstat_obot.")
                return
            advanced_text = self.get_advanced_text(user, full_user, funstat_data)
            await self.inline.form(
                message=message,
                text=advanced_text,
                reply_markup=[
                    [{"text": "üîß –ü–æ–¥—Ä–æ–±–Ω–µ–µ", "callback": self.advanced_detail_callback, "args": (user.id,)}],
                ],
                photo="https://i.imgur.com/Ylwy6Gh.jpeg",
                disable_security=True,
            )
        except Exception as e:
            await message.edit(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

    def get_main_text(self, user, full_user):
        return (
            f"üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n\n"
            f"[+] –ò–º—è: <b>{utils.escape_html(user.first_name)}</b>\n"
            f"[+] –§–∞–º–∏–ª–∏—è: <b>{utils.escape_html(user.last_name or '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}</b>\n"
            f"[+] ID: <b><a href='tg://user?id={user.id}'>{user.id}</a></b>\n"
            f"[+] –Æ–∑–µ—Ä–Ω–µ–π–º: <b>{('@' + user.username) if user.username else '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}</b>\n"
            f"[+] –ë–æ—Ç: <b>{'–î–∞' if user.bot else '–ù–µ—Ç'}</b>\n"
            f"[+] –ï—Å—Ç—å –ø—Ä–µ–º–∏—É–º: <b>{'–î–∞' if user.premium else '–ù–µ—Ç'}</b>\n"
            f"[+] –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω: <b>{'–î–∞' if user.verified else '–ù–µ—Ç'}</b>\n\n"
            f"[+] –û–ø–∏—Å–∞–Ω–∏–µ: <b>{utils.escape_html(full_user.full_user.about or '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}</b>"
        )

    def get_detail_text(self, user):
        return (
            f"üë§ –ü–æ–¥—Ä–æ–±–Ω–µ–µ:\n\n"
            f"[+] –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π: <b>{'–î–∞' if user.is_self else '–ù–µ—Ç'}</b>\n"
            f"[+] –í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç: <b>{'–î–∞' if user.contact else '–ù–µ—Ç'}</b>\n"
            f"[+] –í–∑–∞–∏–º–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç: <b>{'–î–∞' if user.mutual_contact else '–ù–µ—Ç'}</b>\n"
            f"[+] –£–¥–∞–ª–µ–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç: <b>{'–î–∞' if user.deleted else '–ù–µ—Ç'}</b>\n"
            f"[+] –ë–æ—Ç: <b>{'–î–∞' if user.bot else '–ù–µ—Ç'}</b>\n"
            f"[+] –ò—Å—Ç–æ—Ä–∏—è: <b>{'–î–∞' if user.bot_chat_history else '–ù–µ—Ç'}</b>\n"
            f"[+] –ë–µ–∑ –∏—Å—Ç–æ—Ä–∏–∏: <b>{'–î–∞' if user.bot_nochats else '–ù–µ—Ç'}</b>\n"
            f"[+] –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç: <b>{'–î–∞' if user.verified else '–ù–µ—Ç'}</b>\n"
            f"[+] –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π: <b>{'–î–∞' if user.restricted else '–ù–µ—Ç'}</b>\n"
            f"[+] –ú–∏–Ω: <b>{'–î–∞' if user.min else '–ù–µ—Ç'}</b>\n"
            f"[+] –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è: <b>{'–î–∞' if user.bot_inline_geo else '–ù–µ—Ç'}</b>\n"
            f"[+] –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç–µ–ª–µ–≥–∏: <b>{'–î–∞' if user.support else '–ù–µ—Ç'}</b>\n"
            f"[+] –°–∫–∞–º-–∞–∫–∫–∞—É–Ω—Ç: <b>{'–î–∞' if user.scam else '–ù–µ—Ç'}</b>\n"
            f"[+] apply_min_photo: <b>{'–î–∞' if user.apply_min_photo else '–ù–µ—Ç'}</b>\n"
            f"[+] –§—ç–π–∫ –∞–∫–∫–∞—É–Ω—Ç: <b>{'–î–∞' if user.fake else '–ù–µ—Ç'}</b>\n"
            f"[+] –ú–µ–Ω—é –≤ –±–æ—Ç–µ: <b>{'–î–∞' if user.bot_attach_menu else '–ù–µ—Ç'}</b>\n"
            f"[+] –ü—Ä–µ–º–∏—É–º: <b>{'–î–∞' if user.premium else '–ù–µ—Ç'}</b>\n"
            f"[+] –ú–µ–Ω—é: <b>{'–î–∞' if user.attach_menu_enabled else '–ù–µ—Ç'}</b>\n"
            f"[+] –ò–∑–º–µ–Ω—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è: <b>{'–î–∞' if user.bot_can_edit else '–ù–µ—Ç'}</b>\n"
            f"[+] –ù–æ–º–µ—Ä: <b>{user.phone or '–ù–µ —É–∫–∞–∑–∞–Ω'}</b>"
        )

    async def get_funstat_data(self, user_identifier):
        funstat_bot = await self.client.get_entity("@funstat_obot")
        if isinstance(user_identifier, str) and not user_identifier.startswith('@'):
            user_identifier = '@' + user_identifier
        await self.client.send_message(funstat_bot, str(user_identifier))
        for _ in range(30):
            async for message in self.client.iter_messages(funstat_bot, limit=1):
                if "–≠—Ç–æ" in message.text:
                    funstat_response = message.text
                    # –£–¥–∞–ª—è–µ–º –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ —Å –±–æ—Ç–æ–º
                    await self.client(DeleteHistoryRequest(peer=funstat_bot, max_id=0, just_clear=True, revoke=True))
                    return self.parse_funstat_data(funstat_response)
            await asyncio.sleep(1)
        return None

    def parse_funstat_data(self, response):
        data = {}
        full_name_match = re.search(r"–≠—Ç–æ (.*)", response)
        data['full_name'] = full_name_match.group(1) if full_name_match else "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å"

        message_count_match = re.search(r"(\d+) —Å–æ–æ–±—â", response)
        chat_count_match = re.search(r"–≤ (\d+) —á–∞—Ç", response)
        data['message_count'] = message_count_match.group(1) if message_count_match else "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å"
        data['chat_count'] = chat_count_match.group(1) if chat_count_match else "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å"

        favorite_chat_match = re.search(r"–õ—é–±–∏–º—ã–π —á–∞—Ç: (.*?)(?:\n|$)", response, re.DOTALL)
        data['favorite_chat'] = favorite_chat_match.group(1).strip() if favorite_chat_match else "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å"

        data['usernames'] = re.findall(r"\| (@\w+)", response)

        names_match = re.search(r"–ò–º–µ–Ω–∞:(.*?)(?:\n\n|\Z)", response, re.DOTALL)
        if names_match:
            names_text = names_match.group(1).strip()
            data['names'] = re.findall(r"\|- [\d.]+ -> (.*)", names_text)
        else:
            data['names'] = []

        return data

    def get_advanced_text(self, user, full_user, funstat_data):
        if not funstat_data:
            return f"üë§ [ADVANCED] –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n\n–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç @funstat_obot."

        names_text = self.format_list(funstat_data['names']) if funstat_data['names'] else "‚Äî –ù–µ –º–µ–Ω—è–ª–∏—Å—å."
        usernames_text = self.format_list(funstat_data['usernames']) if funstat_data['usernames'] else "‚Äî @" + user.username if user.username else "‚Äî –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."

        message_count = funstat_data.get('message_count')
        chat_count = funstat_data.get('chat_count')
        message_info = f"[+] <b>{message_count}</b> —Å–æ–æ–±—â. –≤ <b>{chat_count}</b> —á–∞—Ç.\n" if message_count != "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å" and chat_count != "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å" else ""

        return (
            f"üë§ [ADVANCED] –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n\n"
            f"[+] –ò–º—è: <b>{utils.escape_html(user.first_name)}</b>\n"
            f"[+] –§–∞–º–∏–ª–∏—è: <b>{utils.escape_html(user.last_name or '–ù–µ —É–∫–∞–∑–∞–Ω–∞')} üç∞</b>\n"
            f"[+] ID: <b><a href='tg://user?id={user.id}'>{user.id}</a></b>\n"
            f"[+] –Æ–∑–µ—Ä–Ω–µ–π–º: <b>{('@' + user.username) if user.username else '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}</b>\n"
            f"[+] –ë–æ—Ç: <b>{'–î–∞' if user.bot else '–ù–µ—Ç'}</b>\n"
            f"[+] –ù–∏–∫–Ω–µ–π–º—ã:\n{usernames_text}\n"
            f"[+] –ò–º–µ–Ω–∞:\n{names_text}\n"
            f"[+] –õ—é–±–∏–º—ã–π —á–∞—Ç: <b>{funstat_data['favorite_chat']}</b>\n"
            f"{message_info}"
            f"[+] –ï—Å—Ç—å –ø—Ä–µ–º–∏—É–º: <b>{'–î–∞' if user.premium else '–ù–µ—Ç'}</b>\n"
            f"[+] –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω: <b>{'–î–∞' if user.verified else '–ù–µ—Ç'}</b>\n\n"
            f"[+] –û–ø–∏—Å–∞–Ω–∏–µ: <b>{utils.escape_html(full_user.full_user.about or '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}</b>"
        )

    def format_list(self, items):
        if not items:
            return "‚Äî –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."
        formatted = "\n".join(f"‚Äî {item}" for item in items[:3])
        if len(items) > 3:
            formatted += f"\n‚Äî ...–∏ –µ—â–µ {len(items) - 3}"
        return formatted

    async def detail_callback(self, call, user_id):
        user = await self.client.get_entity(int(user_id))
        detail_text = self.get_detail_text(user)
        await call.edit(
            text=detail_text,
            reply_markup=[
                [{"text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "callback": self.back_callback, "args": (user_id,)}],
            ],
        )

    async def advanced_detail_callback(self, call, user_id):
        user = await self.client.get_entity(int(user_id))
        detail_text = self.get_detail_text(user)
        await call.edit(
            text=detail_text,
            reply_markup=[
                [{"text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "callback": self.advanced_back_callback, "args": (user_id,)}],
            ],
        )

    async def back_callback(self, call, user_id):
        user = await self.client.get_entity(int(user_id))
        full_user = await self.client(GetFullUserRequest(user.id))
        main_text = self.get_main_text(user, full_user)
        await call.edit(
            text=main_text,
            reply_markup=[
                [{"text": "üîß –ü–æ–¥—Ä–æ–±–Ω–µ–µ", "callback": self.detail_callback, "args": (user_id,)}],
            ],
        )

    async def advanced_back_callback(self, call, user_id):
        user = await self.client.get_entity(int(user_id))
        full_user = await self.client(GetFullUserRequest(user.id))
        funstat_data = await self.get_funstat_data(user.username or user.id)
        advanced_text = self.get_advanced_text(user, full_user, funstat_data)
        await call.edit(
            text=advanced_text,
            reply_markup=[
                [{"text": "üîß –ü–æ–¥—Ä–æ–±–Ω–µ–µ", "callback": self.advanced_detail_callback, "args": (user_id,)}],
            ],
        )
